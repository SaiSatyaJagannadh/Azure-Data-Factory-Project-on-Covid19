{
	"name": "df_hospitaladmissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospitalAdmissions",
						"type": "DatasetReference"
					},
					"name": "sourceforhospitaladmission"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceforcountry"
				},
				{
					"dataset": {
						"referenceName": "ds_hospitaladmissions_dimdate",
						"type": "DatasetReference"
					},
					"name": "dimdatasourceexternalfile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkforweeklydata"
				},
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "sinkfordaily"
				}
			],
			"transformations": [
				{
					"name": "Hospitaldatarequired"
				},
				{
					"name": "lookupforcountry"
				},
				{
					"name": "selectreqfromprevious"
				},
				{
					"name": "splitdailyfromweekly"
				},
				{
					"name": "aggregatedimdate"
				},
				{
					"name": "joindatedata"
				},
				{
					"name": "pivotweekly"
				},
				{
					"name": "pivotdaily"
				},
				{
					"name": "sortweeklydata"
				},
				{
					"name": "sortdailydata"
				},
				{
					"name": "selectweeklydata"
				},
				{
					"name": "selectdaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceforhospitaladmission",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceforcountry",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimdatasourceexternalfile",
				"sourceforhospitaladmission select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Hospitaldatarequired",
				"Hospitaldatarequired, sourceforcountry lookup(Hospitaldatarequired@country == sourceforcountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupforcountry",
				"lookupforcountry select(mapColumn(",
				"          country = Hospitaldatarequired@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectreqfromprevious",
				"selectreqfromprevious split(indicator=='Weekly new hospital admissions per 100k' || indicator== 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitdailyfromweekly@(weekly, daily)",
				"dimdatasourceexternalfile aggregate(groupBy(ecdc_year_week = year+'-W'+lpad((week_of_year),2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregatedimdate",
				"splitdailyfromweekly@weekly, aggregatedimdate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joindatedata",
				"joindatedata pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotweekly",
				"splitdailyfromweekly@daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotdaily",
				"pivotweekly sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> sortweeklydata",
				"pivotdaily sort(asc(country, true),",
				"     desc(reported_date, true),",
				"     partitionBy('hash', 1)) ~> sortdailydata",
				"sortweeklydata select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_ICU_occupancy_count = {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectweeklydata",
				"sortdailydata select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          hospital_occupancy_count = {Daily hospital occupancy_count},",
				"          icu_occupancy_count = {Daily ICU occupancy_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdaily",
				"selectweeklydata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admissions_weekly.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkforweeklydata",
				"selectdaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admissions_daily.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkfordaily"
			]
		}
	}
}